install.packages(c("dplyr", "lubridate", "ggplot2", "magrittr", "rgdal", "raster", "tidyr", "Rcpp"))
install.packages("tidyr")
38.8+54.31
install.packages("manipulate")
install.packages(c("dplyr", "tidyr", "lubridate", "ggplot2", "gridExtra", "RColorBrewer", "ggthemes", "Rcpp"))
?dplyr
install.packages("manipulate")
?summarize
?aggregate
install.packages("readr")
install.packages(c("ggplot2", "lubridate", "dplyr", "tidyr", "magrittr", "rgdal", "RSAGA", "raster", "xtable", "gridExtra", "RColorBrewer", "data.table", "ggmap", "ggthemes"))
install.packages("magrittr")
install.packages(c("ggplot2", "lubridate", "dplyr", "tidyr", "magrittr", "rgdal", "RSAGA", "raster", "xtable", "gridExtra", "RColorBrewer", "data.table", "ggmap", "ggthemes"))
install.packages("RSQLite")
install.packages("readr")
install.packages("readr")
install.packages("shiny")
install.packages("rmarkdown")
1950/2
975-25-29+37
library(raster)
?mask
install.packages(c("curl", "knitr", "rmarkdown", "shiny"))
250+392+187.15+31+10+130.45
62.12+11.2+45+124+13
1000.60+255.32
(1000.60+255.32)/2
627.96-255.32
1000.6-372.64
20*8
20*8*25
install.packages("roxygen2")
setwd('/home/joel/Dropbox/Joel-Documents/DCWBM/Testing/Core_benchmarking')
library(devtools)
install.packages("devtools")
timperiod = '1981-2010'
timeperiod = '1981-2010'
ws.ID = '08FA007'
#run model on a WSC basin as a test
library(RSQLite)
library(Rcpp)
library(rgdal)
#path = 'Dropbox/Joel-Documents/transboundary_hakai/scratch/'
path = '/home/joel/Dropbox/Joel-Documents/transboundary_hakai/scratch/'
setwd(path)
con <- dbConnect(SQLite(), dbname='transboundary.sqlite')
dat <- dbGetQuery(con, paste0("SELECT coords.ID, coords.Lat, coords.Long, coords.Elev, ", timeperiod, ".*, globcover_legend.LC_class, globcover_legend.Water, globcover_legend.Glacier FROM coords
INNER JOIN wscbasins ON coords.ID = wscbasins.ID
INNER JOIN ", timeperiod, " ON coords.ID = ",timeperiod, ".ID
INNER JOIN globcover ON coords.ID = globcover.ID
INNER JOIN globcover_legend ON globcover.globcover=globcover_legend.Value
WHERE wscbasins.WSC_ID_1= '",ws.ID, "'
OR wscbasins.WSC_ID_2= '", ws.ID, "'
OR wscbasins.WSC_ID_3= '", ws.ID, "'
OR wscbasins.WSC_ID_4= '", ws.ID, "'
OR wscbasins.WSC_ID_5= '", ws.ID, "'"
)
)
timeperiod = 'Norm1981_2010'
dat <- dbGetQuery(con, paste0("SELECT coords.ID, coords.Lat, coords.Long, coords.Elev, ", timeperiod, ".*, globcover_legend.LC_class, globcover_legend.Water, globcover_legend.Glacier FROM coords
INNER JOIN wscbasins ON coords.ID = wscbasins.ID
INNER JOIN ", timeperiod, " ON coords.ID = ",timeperiod, ".ID
INNER JOIN globcover ON coords.ID = globcover.ID
INNER JOIN globcover_legend ON globcover.globcover=globcover_legend.Value
WHERE wscbasins.WSC_ID_1= '",ws.ID, "'
OR wscbasins.WSC_ID_2= '", ws.ID, "'
OR wscbasins.WSC_ID_3= '", ws.ID, "'
OR wscbasins.WSC_ID_4= '", ws.ID, "'
OR wscbasins.WSC_ID_5= '", ws.ID, "'"
)
)
dat <- dat[ !duplicated(names(dat)) ]
dat %<>% dplyr::select(-starts_with('Tmin'), -starts_with('Tmax'), -starts_with('PAS'))
ws.ID = '08fa007'
dat <- dbGetQuery(con, paste0("SELECT coords.ID, coords.Lat, coords.Long, coords.Elev, ", timeperiod, ".*, globcover_legend.LC_class, globcover_legend.Water, globcover_legend.Glacier FROM coords
INNER JOIN wscbasins ON coords.ID = wscbasins.ID
INNER JOIN ", timeperiod, " ON coords.ID = ",timeperiod, ".ID
INNER JOIN globcover ON coords.ID = globcover.ID
INNER JOIN globcover_legend ON globcover.globcover=globcover_legend.Value
WHERE wscbasins.WSC_ID_1= '",ws.ID, "'
OR wscbasins.WSC_ID_2= '", ws.ID, "'
OR wscbasins.WSC_ID_3= '", ws.ID, "'
OR wscbasins.WSC_ID_4= '", ws.ID, "'
OR wscbasins.WSC_ID_5= '", ws.ID, "'"
))
#get rid of the tmin and tmax stuff using dplyr, maybe better to do it in sql?
dat <- dat[ !duplicated(names(dat)) ]
dat %<>% dplyr::select(-starts_with('Tmin'), -starts_with('Tmax'), -starts_with('PAS'))
saveRDS(dat, '/home/joel/Dropbox/Joel-Documents/DCWBM/Package/data/owikeno.RDS')
rundat <- as.matrix(dat)
runoff <- waterbalance(params, rundat)
sourceCpp('../../DCWBM/Testing/Core_benchmarking/thorn_core.cpp')
rundat <- as.matrix(dat)
runoff <- waterbalance(params, rundat)
params = c(1.75,1.25,1,0,0.1,0.25)
runoff <- waterbalance(params, rundat)
saveRDS(colMeans(runoff), '/home/joel/Dropbox/Joel-Documents/DCWBM/Package/tests/owikenorunoff.RDS')
str(dat)
DCWBM <- function(data, params, output == 'LUMPED'){
rundat <- as.matrix(data)
runoff <- waterbalance(data, params)
if ( output == 'DISTRIB'){
out <- data.frame(ID = data$ID, Lat = data$Lat, Long = data$Long) %>%
bind_cols(out, runoff) %>%
set_colnames(c('ID', 'Lat', 'Long', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
} else {
out <- colMeans(runoff)
}
}
DCWBM <- function(data, params, output = 'LUMPED'){
rundat <- as.matrix(data)
runoff <- waterbalance(data, params)
if ( output == 'DISTRIB'){
out <- data.frame(ID = data$ID, Lat = data$Lat, Long = data$Long) %>%
bind_cols(out, runoff) %>%
set_colnames(c('ID', 'Lat', 'Long', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
} else {
out <- colMeans(runoff)
}
}
setwd('/home/joel/Dropbox/Joel-Documents/DCWBM/Package/')
library(Rcpp)
sourceCpp('./thorn_core.cpp')
sourceCpp('./src/thorn_core.cpp')
sourceCpp('./src/thorn_core.cpp')
Owikeno = readRDS('./data/owikeno.RDS')
params = c(1.75,1.25,1,0,0.1,0.25)
DCWMBM(Owikeno, params)
DCWBM(Owikeno, params)
DCWBM <- function(data, params, output = 'LUMPED'){
rundat <- as.matrix(data)
runoff <- waterbalance(rundat, params)
if ( output == 'DISTRIB'){
out <- data.frame(ID = data$ID, Lat = data$Lat, Long = data$Long) %>%
bind_cols(out, runoff) %>%
set_colnames(c('ID', 'Lat', 'Long', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
} else {
out <- colMeans(runoff)
}
}
DCWBM(Owikeno, params)
rundat = readRDS('./data/owikeno.RDS')
rundat <- as.matrix(data)
runoff <- waterbalance(rundat, params)
DCWBM <- function(params, data, output = 'LUMPED'){
rundat <- as.matrix(data)
runoff <- waterbalance(params, rundat)
if ( output == 'DISTRIB'){
out <- data.frame(ID = data$ID, Lat = data$Lat, Long = data$Long) %>%
bind_cols(out, runoff) %>%
set_colnames(c('ID', 'Lat', 'Long', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
} else {
out <- colMeans(runoff)
}
}
DCWBM(params, Owikeno)
DCWBM <- function(params, data, output = 'LUMPED'){
rundat <- as.matrix(data)
runoff <- waterbalance(params, rundat)
if ( output == 'DISTRIB'){
out <- data.frame(ID = data$ID, Lat = data$Lat, Long = data$Long) %>%
bind_cols(out, runoff) %>%
set_colnames(c('ID', 'Lat', 'Long', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
} else {
out <- colMeans(runoff)
}
return(out)
}
DCWBM(params, Owikeno)
library("roxygen2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
?"roxygen-package"
vignette("roxygen2", package = "roxygen2")
#' Run the Distributed Climate Water Balance Model
#'
#' @param parameters A vector of model parameters for adjusting snowmelt rates and interception rates by landcover
#' @param data A data frame of inputs to the model
#' @param output Desired output form, either 'LUMPED' or 'DISTRIBUTED'
#' @return Runoff in millimeters, either lumped for the whole area, or distributed by coordinate.
#'
#' @export
DCWBM <- function(parameters, data, output = 'LUMPED'){
rundat <- as.matrix(data)
runoff <- waterbalance(parameters, rundat)
if ( output == 'DISTRIB'){
out <- data.frame(ID = data$ID, Lat = data$Lat, Long = data$Long) %>%
bind_cols(out, runoff) %>%
set_colnames(c('ID', 'Lat', 'Long', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'))
} else {
out <- colMeans(runoff)
}
return(out)
}
?DCWBM
pwd
pwd()
getwd()
Rcpp::compileAttributes()
load_all()
library("devtools", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
load_all()
load_all()
load_all()
load_all()
load_all()
?DCWBM
params <- c(1.75,1.25,1,0,0.1,0.25)
data <- readRDS('./data/owikeno.RDS')
?context
output <- readRDS('./tests/test_that/owikenorunoff.RDS')
output <- readRDS('./tests/testthat/owikenorunoff.RDS')
test_that('Runoff is correct', {
expect_equal(DCWBM(params,data, output='LUMPED'),output)
})
devtools::test()
install.packages("testthat")
devtools::test().
devtools::test()
devtools::test()
devtools::test()
devtools::test()
?testthat
devtools::document()
load_all()
?DCWBM
1.75*2
1.25*2
2.5/3.5
devtools::document()
load_all()
?DCWBM
load_all()
devtools::test()
devtools::document()
devtools::test()
DCWBM(data)
Rcpp::compileAttributes()
DCWBM(data)
DCWBM(data, parameters=c(1.75,1.25,1,0,0.1,0.25))
DCWBM <- function(data, parameters=c(1.75,1.25,1,0,0.1,0.25), output = 'LUMPED'){
rundat <- as.matrix(data)
runoff <- waterbalance(parameters, rundat)
if ( output == 'DISTRIB'){
out <- data.frame(ID = data$ID, Lat = data$Lat, Long = data$Long)
out <- cbind(out, runoff)
names(out) <- c('ID', 'Lat', 'Long', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')
} else {
out <- colMeans(runoff)
}
return(out)
}
DCWBM(data)
load_all
load_all()
library(devtools)
load_all()
Rcpp::compileAttributes()
load_all()
DCWBM(data)
load("/media/data/Dropbox/Joel-Documents/DCWBM/Package/data/owikeno.RDS")
devtools::test()
?DCWBM
